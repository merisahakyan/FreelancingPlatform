// <auto-generated />
using System;
using Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Database.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Core.Database.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<string>("Degree")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("School")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Core.Database.Employment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Company")
                        .IsRequired();

                    b.Property<bool>("CurrentlyWorking");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<string>("Description");

                    b.Property<int?>("LocationId");

                    b.Property<string>("Role")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Employments");
                });

            modelBuilder.Entity("Core.Database.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GivingId")
                        .IsRequired();

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<int>("Rating");

                    b.Property<int?>("ReceiverId");

                    b.Property<int?>("WorkId");

                    b.HasKey("Id");

                    b.HasIndex("GivingId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("WorkId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Core.Database.Key", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Core.Database.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Core.Database.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("ProjectUrl");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("Core.Database.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<long>("DaysCount");

                    b.Property<string>("Message");

                    b.Property<double>("Rate");

                    b.Property<int?>("UserId");

                    b.Property<int?>("WorkId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Core.Database.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Database.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Core.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Availability");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("DescriptionHeader")
                        .IsRequired();

                    b.Property<string>("Firstname")
                        .IsRequired();

                    b.Property<decimal>("HourlyRate");

                    b.Property<int>("HoursWorked");

                    b.Property<string>("Lastname")
                        .IsRequired();

                    b.Property<int?>("LocationId");

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<int?>("RoleId");

                    b.Property<int>("TimePlusUTC");

                    b.Property<decimal>("TotalEarned");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Database.UserCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CertificateId");

                    b.Property<string>("URL")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCertificates");
                });

            modelBuilder.Entity("Core.Database.UserSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SkillId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("Core.Database.UserWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<decimal>("TotalEarned");

                    b.Property<int?>("UserId");

                    b.Property<decimal>("UserRate");

                    b.Property<int?>("WorkId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkId");

                    b.ToTable("UserWorks");
                });

            modelBuilder.Entity("Core.Database.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatorId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Header");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("Core.Database.WorkKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("KeyId");

                    b.Property<int?>("WorkId");

                    b.HasKey("Id");

                    b.HasIndex("KeyId");

                    b.HasIndex("WorkId");

                    b.ToTable("WorkKeys");
                });

            modelBuilder.Entity("Core.Database.Education", b =>
                {
                    b.HasOne("Core.Database.User", "User")
                        .WithMany("Educations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Core.Database.Employment", b =>
                {
                    b.HasOne("Core.Database.Location", "Location")
                        .WithMany("Companies")
                        .HasForeignKey("LocationId");

                    b.HasOne("Core.Database.User", "User")
                        .WithMany("Employment")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Core.Database.Feedback", b =>
                {
                    b.HasOne("Core.Database.User", "Giving")
                        .WithMany("GivingFeedbacks")
                        .HasForeignKey("GivingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Database.User", "Receiver")
                        .WithMany("ReceivedFeedbacks")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("Core.Database.Work", "Work")
                        .WithMany("Feedbacks")
                        .HasForeignKey("WorkId");
                });

            modelBuilder.Entity("Core.Database.Portfolio", b =>
                {
                    b.HasOne("Core.Database.User", "User")
                        .WithMany("Portfolios")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Core.Database.Proposal", b =>
                {
                    b.HasOne("Core.Database.User", "User")
                        .WithMany("Proposals")
                        .HasForeignKey("UserId");

                    b.HasOne("Core.Database.Work", "Work")
                        .WithMany("Proposals")
                        .HasForeignKey("WorkId");
                });

            modelBuilder.Entity("Core.Database.User", b =>
                {
                    b.HasOne("Core.Database.Location", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationId");

                    b.HasOne("Core.Database.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Core.Database.UserCertificate", b =>
                {
                    b.HasOne("Core.Database.Certificate", "Certificate")
                        .WithMany("UserCertificates")
                        .HasForeignKey("CertificateId");

                    b.HasOne("Core.Database.User", "User")
                        .WithMany("UserCertificates")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Core.Database.UserSkill", b =>
                {
                    b.HasOne("Core.Database.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId");

                    b.HasOne("Core.Database.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Core.Database.UserWork", b =>
                {
                    b.HasOne("Core.Database.User", "User")
                        .WithMany("UserWorks")
                        .HasForeignKey("UserId");

                    b.HasOne("Core.Database.Work", "Work")
                        .WithMany("UserWorks")
                        .HasForeignKey("WorkId");
                });

            modelBuilder.Entity("Core.Database.Work", b =>
                {
                    b.HasOne("Core.Database.User", "Creator")
                        .WithMany("CreatedWorks")
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("Core.Database.WorkKey", b =>
                {
                    b.HasOne("Core.Database.Key", "Key")
                        .WithMany("WorkKeys")
                        .HasForeignKey("KeyId");

                    b.HasOne("Core.Database.Work", "Work")
                        .WithMany("WorkKeys")
                        .HasForeignKey("WorkId");
                });
#pragma warning restore 612, 618
        }
    }
}
